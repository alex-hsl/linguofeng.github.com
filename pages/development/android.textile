---
layout: default
title: Android
---

<div id="charpter">

h3. Android

* "四大组件":#1
* "控件":#2
* "动画":#3
** "Tween Animation":#301
** "Frame Animation":#302
* "Threads线程":#4
** "AsyncTask异步任务":#41
* "常用":#5
** "获取当前系统版本号":#501
** "横屏显示":#502
** "全屏无标题栏显示":#503
** "无标题栏显示":#504
** "自定义标题栏布局":#505
** "自定义标题栏背景":#506
** "ListView滚动加载":#507
** "异常处理":#508
* "优化":#6
** "ListView优化":#601
** "图片缓存":#602
* "网络编程":#7
* "资源":#8
** "drawble":#801
** "values":#802
** "raw":#803
** "assets":#804

</div>

h1. Android

h3(#1). Android四大组件
<hr />

*(#activity) *Activity*
** "Activity生命周期":http://www.linguofeng.com/2011/09/special-edition-_activity-android-life-cycle.html
** "PreferenceActivity的使用":android/PreferenceActivity.html

*(#service) *Service* - 服务
** "startService":http://www.linguofeng.com
** "bindService":http://blog.greensock.com
** "AIDL":android/AIDL.html - Android Interface Definition Language(接口描述语言，用于进程通信)

*(#broadcastreceiver) *BroadcastReceiver* - 广播接收者

*(#contentprovider) *ContentProvider* - 内容提供者

h3(#2). Android UI控件
<hr />

* "TextView":java.html - 文本
* "Menus":android/menu.html - 菜单（Options Menu、Context Menu、Submenu）
* "Dialogs":android/dialog.html - 对话框（AlertDialog、ProgressDialog、DatePickerDialog、TimePickerDialog）
* "Notifications":android/Notifications.html - 通知（Toast Notification、Status Bar Notification、Dialog Notification）
* "ViewPager":android/ViewPager.html - *视图切换
* "Custom Components":http://www.linguofeng.com - 自定义控件

h3(#3). Android动画
<hr />

*(#301) *Tween Animation*
** "平移":android/TranslateAnimation.html - TranslateAnimation
** "渐变":android/AlphaAnimation.html - AlphaAnimation
** "缩放":android/ScaleAnimation.html - ScaleAnimation
** "旋转":android/RotateAnimation.html - RotateAnimation

*(#302) *Frame Animation*
** "逐帧动画":android/AnimationDrawable.html - AnimationDrawable

h3(#4). Threads线程
<hr />

*(#41) "AsyncTask 异步任务":android/AsyncTask.html

h3(#5). 常用
<hr />

*(#501) *获取当前系统版本号*
<hr />

pre. android.os.Build.VERSION.SDK_INT

*(#502) *横屏显示*
<hr />

pre. <activity android:screenOrientation="landscape"

*(#503) *全屏无标题栏显示*
<hr />

pre. <application android:theme="@android:style/Theme.Black.NoTitleBar.Fullscreen"

*(#504) *无标题栏显示*
<hr />

<pre class="brush: xml">
<!-- XML实现 -->
<application android:theme="@android:style/Theme.Black.NoTitleBar" />
</pre>

<pre class="brush: java">
// JAVA实现
requestWindowFeature(Window.FEATURE_NO_TITLE);
</pre>

*(#505) *自定义标题栏布局*
<hr />

<pre class="brush: java;">
// 1.Activity：
// 声明使用自定义标题
requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
setContentView(R.layout.main);
// 自定义标题栏布局
getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.main_title);
</pre>

<pre class="brush: xml;">
<!-- 2.XML：main_title.xml -->
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="horizontal" >

    <ImageView
        android:id="@+id/title_back"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerVertical="true"
        android:focusable="true"
        android:contentDescription="@string/app_name"
        android:src="@drawable/title_back_btn" />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:text="@string/app_name"
        android:textColor="#ff000000" />

    <ImageView
        android:id="@+id/title_reload"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentRight="true"
        android:layout_centerVertical="true"
        android:layout_marginRight="5.0px"
        android:focusable="true"
        android:contentDescription="@string/app_name"
        android:src="@drawable/title_new_btn" />

</RelativeLayout>
</pre>

*(#506) *自定义标题栏背景与高度* (上面只是自定义标题栏的而已，而背景与高度还是没有变化，接下来就要处理标题栏背景与高度)
<hr />

<pre class="brush: xml">
<!-- 1.创建value/styles.xml文件 -->
<?xml version="1.0" encoding="UTF-8"?>
<resources>
    <style name="CustomWindowTitleBackground">
        <item name="android:background">@drawable/titlebar_bg_nor</item>
    </style>
    <style name="title" parent="@android:style/Theme">
        <item name="android:windowTitleSize">50.0dip</item>
        <item name="android:windowTitleBackgroundStyle">@style/CustomWindowTitleBackground</item>
    </style>
</resources>

<!-- 2.接着在清单文件中添加android:theme属性 -->
<activity android:name=".MainActivity" android:theme="@style/title" />
</pre>

*(#507) *ListView滚动加载更新数据*
<hr />

<pre class="brush: java">
ListView.setOnScrollListener(new OnScrollListener() {
    // 滚动状态改变时执行
    public void onScrollStateChanged(AbsListView view, int scrollState) {
        // 停止滚动状态
        switch (scrollState) {
        case OnScrollListener.SCROLL_STATE_IDLE:
            // 判断滚动到底部
            // view.getLastVisiblePosition() 获得最后一条可见记录的下标位置（下标从1开始）
            if (view.getLastVisiblePosition() == (view.getCount() - 1)) {
                // TODO 滚动到底部时自动加载更多数据
            }
        break;
        }
    }
});
</pre>

*(#508) *异常处理* (提示用户把异常信息回馈给公司)
<hr />

<pre class="brush: java">
//==================================================================================
//= 1.实现UncaughtExceptionHandler接口
//==================================================================================
class ExceptionHandler implements UncaughtExceptionHandler {
    private static ExceptionHandler exceptionHandler;
    
    // 私有构造方法
    private ExceptionHandler(){}
    
    // 单态
    public synchronized static ExceptionHandler getInstance(){
        if(exceptionHandler == null)
            exceptionHandler = new ExceptionHandler();
        return exceptionHandler;
    }
    
    // 实现该方法
    public void uncaughtException(){
        // TODO 能够捕获到所有异常
        
        // 获取手机硬件信息（通过反射）
        Fields[] fields = Build.class.getDeclaredFields();
        for(Field field : fields) {
            // 暴力反射
            field.setAccessible(true);
            String name = field.getName();
            // 静态字段值
            String value = field.get(null).toString();
            // TODO 把获取的手机信息拼装起来
        }
        
        // 获取当前程序的版本
        String version = Context.getPackageManager().getPackageInfo(Context.getPackageName(), 0).versionName;
        
        // 获取异常信息
        Writer w = new StringWriter();
        printWriter writer = new PirntWriter(w);
        ex.printStackTrace(writer);
        writer.flush();
        writer.close();
        
        String error = writer.toString();
        
        // TODO 把上面获取到的信息提交到服务器
        
        // 退出程序(根据需求需要延迟杀死进程)
        android.os.Process.killProcess(android.os.Process.myPid());
    }
}
</pre>

<pre class="brush: java">
 //=================================================================================
//= 2.让应用统一使用自定义的异常处理类
//==================================================================================
public class App extends Application {
    public void onCreate(){
        ExceptionHandler handler = ExceptionHandler.getInstance();
        // 把异常处理设置到主线程中
        Thread.setDefaultUncaughtExceptionHandler(handler);
    }
}
</pre>

*(#509) *在子线程中使用主线程的消息队列*
<hr />

<pre class="brush: java;">
// 创建消息队列
Looper.prepare();
// 在消息队列中执行
Toase.makeText(this, "我是在子线程中利用Looper消息队列实现显示", 0).show();
// 进入消息循环
Looper.loop();
</pre>

*(#510) *获取应用版本号并在线更新应用*
<hr />

<pre class="brush: java">
PackageInfo pi = Context.getPackageManager().getPackageInfo(Context.getPackageName(), 0);
// 版本
pi.versionName;
</pre>

h3(#6). 优化
<hr />

*(#601) *ListView优化*
<hr />

<pre class="brush: java;">
class ViewHolder{
    TextView mTextView;
}

public View getView(...){
    if(convertView == null){
        convertView = Layou...;
        convertView.setTag(new ViewHolder());
    }
    
    ViewHolder viewHolder = (ViewHolder)convertView.getTag();
    viewHolder.mTextView = convertView.findById...;
}
</pre>

*(#602) *图片缓存* 软引用办法实现缓存
<hr />

<pre class="brush: java">
// 集合
Map<String, SoftReference<Bitmap>> imageCache = new HashMap<String, SoftReference<Bitmap>>();

// 取
if (imageCache.containsKey(imageUrl)) {
    Bitmap bitmap = imageCache.get(imageUrl).get();
}

// 存
imageCache.put(imageUrl, new SoftReference<Drawable>(bitmap));
</pre>

h3(#7). 网络编程
<hr />

* *URL* & *URLConnection* （常用于下载文件）
** 下载文件

* *HttpURLConnection* （POST请求时参数是以流的形式发送给服务器）
** GET
** POST

* *HttpClient*
** GET
** POST
** 上传文件

* *AndroidHttpClient*

* *Socket* （TCP & UDP）

h3(#8). 资源
<hr />

*(#801) *drawable*

<pre class="brush: xml">
<!-- XML中使用该类型资源 -->
<ImageView android:src="@drawable/icon" />
</pre>

<pre class="brush: java">
// java中使用该类型资源
Drawable icon = getResources().getDrawable(R.drawable.icon);
</pre>

*(#802) *values*

<pre class="brush: xml">
<!-- XML中使用该类型资源 -->
<TextView android:text="@string/text" />
</pre>

<pre class="brush: java">
// java中使用该类型资源

// 对应：<string name="text">xxx</string>
String text = getResources().getString(R.string.text);

// 对应：<string-array name="texts"><item>xxx</item></string-array>
String[] texts = getResources().getStringArray(R.array.texts);

// 对应：<color name="black">#000000</color>
int color = getResources().getColor(R.color.black);
</pre>

*(#803) *raw*

<pre class="brush: java">
InputStream in = getResources().openRawResource(R.raw.test);
</pre>

*(#804) *assets*

<pre class="brush: java">
AssetManager assetManager = getResources().getAssets();
InputStream is = assetManager.open("文件名", MODE_APPEND);
</pre>